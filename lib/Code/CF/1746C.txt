// Please submit with C++14! It's best to use C++20 or higher version.
constexpr bool __MTCS__ = 1;  // Spectre (admin@rbtree.app)
#ifndef LOCAL                 // By rbtree (https://rbtree.app)
#pragma region HEAD           // DO OR DIE
#endif
#include <algorithm>
#include <array>
#include <bitset>
#include <cmath>
#include <cstring>
#include <functional>
#include <iostream>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <random>
#include <set>
#include <unordered_map>
#include <utility>
#include <vector>
#ifdef ___RB_DEBUG___
#include "rb_debug.h"
#else
#define dbg(...)
#endif
#define ra (scanf("%lld", &la), la)
#define se(exp) exp.begin(), exp.end()
#define LIKELY(exp) __builtin_expect(bool(exp), 1)
#define UNLIKELY(exp) __builtin_expect(bool(exp), 0)

typedef long long tp;
using namespace std;
void __Cored__(tp);
tp la;

signed main(/* >_< */) {
  for (static tp __TCS__ = __MTCS__ ? ra : 1, __NOW__ = 0; __NOW__ < __TCS__;
       __Cored__(++__NOW__)) {
  }
  return 0;
}

#ifndef LOCAL
#pragma endregion HEAD
#endif

////////////////////////////////////////////////////////////////////////////////

void __Cored__([[maybe_unused]] tp __TID__) {
  tp n = ra;
  vector<tp> a(n + 1), v(n), tar(n + 1, 1);
  for (tp i = 1; i <= n; ++i) a[i] = ra;
  for (tp i = 0; i < n; ++i) v[i] = i + 1;
  for (tp i = 1; i < n; ++i) {
    if (a[i] > a[i + 1]) {
      auto t = lower_bound(se(v), a[i] - a[i + 1]);
      tar[*t] = i + 1;
      v.erase(t);
    }
  }
  for (tp i = 1; i <= n; ++i) printf("%lld ", tar[i]);
  puts("");
}

//*/
